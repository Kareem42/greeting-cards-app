// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String?
  name          String?
  role          Role      @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  subscriptions Subscription[]
}

model Organization {
  id           String   @id @default(cuid())
  name         String
  description  String?
  status       OrgStatus @default(ACTIVE)
  payoutMethod String?
  createdAt    DateTime @default(now())
  
  donations    Donation[]
  
  @@map("organizations")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  type        ProductType
  price       Int         // cents
  active      Boolean     @default(true)
  metadata    Json?
  createdAt   DateTime    @default(now())
  
  orderItems  OrderItem[]
  
  @@map("products")
}

model Subscription {
  id                 String   @id @default(cuid())
  userId             String
  stripeSubscriptionId String @unique
  plan               String
  status             SubscriptionStatus
  nextRenewalAt      DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  user               User     @relation(fields: [userId], references: [id])
  
  @@map("subscriptions")
}

model Order {
  id                    String      @id @default(cuid())
  userId                String?
  stripePaymentIntentId String?     @unique
  total                 Int         // cents
  status                OrderStatus @default(PENDING)
  shippingAddress       Json?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  
  user                  User?       @relation(fields: [userId], references: [id])
  items                 OrderItem[]
  donations             Donation[]
  
  @@map("orders")
}

model OrderItem {
  id            String    @id @default(cuid())
  orderId       String
  productId     String
  quantity      Int       @default(1)
  unitPrice     Int       // cents
  metadata      Json?
  createdAt     DateTime  @default(now())
  
  order         Order     @relation(fields: [orderId], references: [id])
  product       Product   @relation(fields: [productId], references: [id])
  customization Customization?
  mediaAssets   MediaAsset[]
  giftCardAddon GiftCardAddon?
  qrCodes       QRCode[]
  
  @@map("order_items")
}

model Customization {
  id           String    @id @default(cuid())
  orderItemId  String    @unique
  imageUrl     String?
  messageText  String?
  font         String?   @default("Arial")
  layout       String?   @default("standard")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  orderItem    OrderItem @relation(fields: [orderItemId], references: [id])
  
  @@map("customizations")
}

model MediaAsset {
  id              String    @id @default(cuid())
  orderItemId     String
  type            MediaType
  storageUrl      String
  playbackTokenHash String  @unique
  expiresAt       DateTime?
  createdAt       DateTime  @default(now())
  
  orderItem       OrderItem @relation(fields: [orderItemId], references: [id])
  
  @@map("media_assets")
}

model GiftCardAddon {
  id          String           @id @default(cuid())
  orderItemId String           @unique
  provider    GiftCardProvider @default(AMAZON)
  amount      Int              // cents
  codeStatus  GiftCardStatus   @default(PENDING)
  codeLast4   String?
  createdAt   DateTime         @default(now())
  
  orderItem   OrderItem        @relation(fields: [orderItemId], references: [id])
  
  @@map("gift_card_addons")
}

model Donation {
  id             String        @id @default(cuid())
  orderId        String
  organizationId String
  amount         Int           // cents
  status         DonationStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  
  order          Order         @relation(fields: [orderId], references: [id])
  organization   Organization  @relation(fields: [organizationId], references: [id])
  
  @@map("donations")
}

model QRCode {
  id          String    @id @default(cuid())
  orderItemId String
  qrPngUrl    String
  targetUrl   String
  tokenHash   String    @unique
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  
  @@map("qr_codes")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrgStatus {
  ACTIVE
  INACTIVE
}

enum ProductType {
  GREETING_CARD
  GIFT_CARD
  DONATION
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  INCOMPLETE
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

enum MediaType {
  AUDIO
  VIDEO
}

enum GiftCardProvider {
  AMAZON
}

enum GiftCardStatus {
  PENDING
  ISSUED
  FAILED
}

enum DonationStatus {
  PENDING
  PAID
  FAILED
}